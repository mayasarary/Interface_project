#include <Arduino.h>

// ------------ Pin Definitions ------------
#define IN1 13
#define IN2 12
#define IN3 14
#define IN4 27
#define ENA 26
#define ENB 25

// Encoder pins
#define ENCA_A 4
#define ENCB_A 19

// ------------ PID Constants ------------
float Kp = 1.5;
float Ki = 0.1;    // Increased integral gain
float Kd = 0.1;

// Feed-forward offset to overcome friction
#define FEED_FORWARD 80  

// Minimum PWM clamp
#define MIN_PWM 80

// ------------ Target Speed ------------
int targetSpeed = 100;  // in ticks/sec

// ------------ Encoder Variables ------------
volatile long pulseCountA = 0;  
volatile long pulseCountB = 0;  

// ------------ PID Calculation Variables ------------
long lastPulseCountA = 0;
long lastPulseCountB = 0;

float errorA = 0, lastErrorA = 0;
float errorB = 0, lastErrorB = 0;

float outputA = 0;
float outputB = 0;

// Integral accumulators
float integralA = 0;
float integralB = 0;

// To avoid integral windup, clamp the integrals:
float integralMax = 300;  // Adjust if needed

// ------------ Timing ------------
unsigned long lastPidTime = 0;
const unsigned long sampleTime = 50; // in milliseconds

// ------------ Function Prototypes ------------
void IRAM_ATTR encoderAInterrupt();
void IRAM_ATTR encoderBInterrupt();

void setup() {
  Serial.begin(115200);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  // Setup encoder pins with pull-ups
  pinMode(ENCA_A, INPUT_PULLUP);
  pinMode(ENCB_A, INPUT_PULLUP);

  // Attach interrupts
  attachInterrupt(digitalPinToInterrupt(ENCA_A), encoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCB_A), encoderBInterrupt, CHANGE);

  // Set the motor direction to forward
  digitalWrite(IN1, HIGH); // Motor A forward
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); // Motor B forward
  digitalWrite(IN4, LOW);

  // Initial PWM (could start at 0 if desired)
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);

  lastPidTime = millis();
}

void loop() {
  unsigned long now = millis();
  if (now - lastPidTime >= sampleTime) {
    lastPidTime = now;

    // 1) Measure pulse counts
    long currentCountA = pulseCountA;
    long currentCountB = pulseCountB;

    // 2) Calculate delta over sampleTime
    long deltaA = currentCountA - lastPulseCountA;
    long deltaB = currentCountB - lastPulseCountB;

    lastPulseCountA = currentCountA;
    lastPulseCountB = currentCountB;

    // 3) Compute speed (pulses per second)
    float speedA = deltaA * (1000.0 / sampleTime);
    float speedB = deltaB * (1000.0 / sampleTime);

    // 4) Calculate error
    errorA = targetSpeed - speedA;
    errorB = targetSpeed - speedB;

    // 5) Calculate derivative
    float dErrorA = (errorA - lastErrorA) / (sampleTime / 1000.0);
    float dErrorB = (errorB - lastErrorB) / (sampleTime / 1000.0);

    // 6) Update integral
    integralA += errorA * (sampleTime / 1000.0);
    integralB += errorB * (sampleTime / 1000.0);

    // Clamp integral to prevent windup
    if (integralA > integralMax)  integralA = integralMax;
    if (integralA < -integralMax) integralA = -integralMax;
    if (integralB > integralMax)  integralB = integralMax;
    if (integralB < -integralMax) integralB = -integralMax;

    // 7) PID Output = feed-forward + P + I + D
    outputA = FEED_FORWARD 
              + (Kp * errorA) 
              + (Ki * integralA) 
              + (Kd * dErrorA);

    outputB = FEED_FORWARD
              + (Kp * errorB) 
              + (Ki * integralB) 
              + (Kd * dErrorB);

    // 8) Clamp outputs to [0, 255]
    if (outputA > 255) outputA = 255;
    if (outputA < 0)   outputA = 0;
    if (outputB > 255) outputB = 255;
    if (outputB < 0)   outputB = 0;

    // 9) Enforce a MIN_PWM if the motor should move forward
    if (outputA > 0 && outputA < MIN_PWM) {
      outputA = MIN_PWM;
    }
    if (outputB > 0 && outputB < MIN_PWM) {
      outputB = MIN_PWM;
    }

    // 10) Write new PWM duty cycle
    analogWrite(ENA, (int)outputA);
    analogWrite(ENB, (int)outputB);

    // 11) Save errors for the next loop
    lastErrorA = errorA;
    lastErrorB = errorB;

    // Debug prints
    Serial.print("Motor A: Speed=");
    Serial.print(speedA);
    Serial.print("  Output=");
    Serial.print(outputA);
    Serial.print("  Error=");
    Serial.print(errorA);
    Serial.print("  Integral=");
    Serial.print(integralA);

    Serial.print("\nMotor B: Speed=");
    Serial.print(speedB);
    Serial.print("  Output=");
    Serial.print(outputB);
    Serial.print("  Error=");
    Serial.print(errorB);
    Serial.print("  Integral=");
    Serial.println(integralB);
  }
}

// ------------ Interrupt routines ------------
void IRAM_ATTR encoderAInterrupt() {
  pulseCountA++;
}

void IRAM_ATTR encoderBInterrupt() {
  pulseCountB++;
}
