#include <Arduino.h>
#include <Wire.h>
#include <VL53L0X.h>

// Motor pins
#define IN1 13
#define IN2 12
#define IN3 14
#define IN4 27
#define ENA 26
#define ENB 25

// Encoder pins
#define ENCA_A 4
#define ENCA_B 18
#define ENCB_A 19
#define ENCB_B 23

// Encoder variables
volatile long pulseCountA = 0;
volatile long pulseCountB = 0;

// Motor speed and PID parameters
const int baseSpeed = 80;
double Kp = 1.2, Ki = 0.4, Kd = 0.005;
double error, lastError = 0, integral = 0, derivative;

// Function prototypes
void IRAM_ATTR encoderAInterrupt();
void IRAM_ATTR encoderBInterrupt();
void moveForward();

void setup() {
    // Initialize motor and encoder pins
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);
    pinMode(ENA, OUTPUT);
    pinMode(ENB, OUTPUT);
    pinMode(ENCA_A, INPUT);
    pinMode(ENCA_B, INPUT);
    pinMode(ENCB_A, INPUT);
    pinMode(ENCB_B, INPUT);

    // Attach interrupts for encoders
    attachInterrupt(digitalPinToInterrupt(ENCA_A), encoderAInterrupt, CHANGE);
    attachInterrupt(digitalPinToInterrupt(ENCA_B), encoderBInterrupt, CHANGE);
    attachInterrupt(digitalPinToInterrupt(ENCB_A), encoderAInterrupt, CHANGE);
    attachInterrupt(digitalPinToInterrupt(ENCB_B), encoderBInterrupt, CHANGE);

    // Start serial communication
    Serial.begin(115200);
    Serial.println("Robot initialized and moving straight...");
}

void loop() {
    error = pulseCountA - pulseCountB;
    integral += error;
    derivative = error - lastError;

    // PID output for motor speed adjustment
    int speedAdjustment = Kp * error + Ki * integral + Kd * derivative;
    int motorSpeedA = baseSpeed + speedAdjustment;
    int motorSpeedB = baseSpeed - speedAdjustment;

    // Ensure the motor speeds stay within PWM bounds
    motorSpeedA = constrain(motorSpeedA, 0, 255);
    motorSpeedB = constrain(motorSpeedB, 0, 255);

    // Apply the speeds to the motors
    analogWrite(ENA, motorSpeedA);
    analogWrite(ENB, motorSpeedB);

    moveForward();
    lastError = error;

    delay(10); // Delay for stability
}

void moveForward() {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    Serial.println("Moving forward...");
}

// Encoder interrupt handlers
void IRAM_ATTR encoderAInterrupt() {
    pulseCountA++;
}

void IRAM_ATTR encoderBInterrupt() {
    pulseCountB++;
}
